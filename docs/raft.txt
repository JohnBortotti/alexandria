== notes about the Raft Algorithm

=== Follower Role

* When a node is created, it starts as a follower.
* A follower has a `leader_seen_timeout`. When this timeout reaches its limit, 
the follower increases its `current_term`, becomes a candidate, 
and broadcasts a `RequestVote` message (starts an election).
* If a follower receives an `AppendEntries` message, the local log is updated 
with the new entries, which can be committed when the leader signals.
* If a follower receives a `RequestVote` message, it compares the message term with its own `current_term`. 
If the message term is greater, it broadcasts a vote message (voting for the sender node) and 
starts following the sender node; otherwise, it ignores the message.
* If a follower receives a `Vote` message, it ignores it.

=== Candidate Role

* A candidate starts by voting for itself (`candidate.votes = 1`) and increments the `current_term`.
* A candidate has an `election_timeout`. When this timeout reaches its limit,
the candidate increases its `current_term` (`self.current_term += 1`) and starts a new election.
* When starting a new election, the candidate broadcasts a `RequestVote` message.
* If a candidate receives an `AppendEntries` message, it checks the sender's `current_term` to decide the next step.
If the sender's term is greater, it starts following the new node; otherwise, it ignores the message.
* If a candidate receives a `RequestVote` message, it checks the message term. If the message term is greater than the candidate's `current_term`,
it broadcasts a vote for the `RequestVote` sender and becomes a follower; otherwise, it ignores the message.
* If a candidate receives a `Vote` message, it checks the `voted_for` field. If it is the target, it increases its own votes.
If it gets the majority of votes, it becomes the leader; otherwise, it ignores the message.

=== Leader Role

* The leader sends repeated heartbeats to maintain leadership.
* If a leader receives a client command, it appends its own log with this new entry, then broadcasts this entry to other peers.
When the majority of peers have received the `AppendEntries`, the leader commits this entry.
This means it is safe to apply the command to the state machine and return the result to the client.

